
import { useEffect, useRef, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { clearAuthData } from '@/lib/supabase';
import { toast } from '@/hooks/use-toast';

const AuthCleanup = () => {
  const cleanupDone = useRef(false);
  const [networkFailed, setNetworkFailed] = useState(false);
  
  // Fonction pour v√©rifier la connectivit√©
  const checkConnection = async () => {
    try {
      const response = await fetch('https://cfjibduhagxiwqkiyhqd.supabase.co', {
        method: 'HEAD',
        mode: 'no-cors',
        cache: 'no-store'
      });
      return true;
    } catch (e) {
      console.error("Erreur de connectivit√©:", e);
      return false;
    }
  };
  
  // Nettoyer les donn√©es d'authentification de fa√ßon agressive
  useEffect(() => {
    if (cleanupDone.current) return;
    
    const performCleanup = async () => {
      console.log("üßπ AuthCleanup: Nettoyage agressif des donn√©es d'authentification");
      
      // V√©rifier la connectivit√© r√©seau
      const isNetworkOk = await checkConnection();
      if (!isNetworkOk) {
        setNetworkFailed(true);
        console.log("‚ö†Ô∏è Probl√®me de connectivit√© r√©seau d√©tect√©");
        toast({
          title: "Probl√®me de connexion",
          description: "V√©rifiez votre connexion Internet",
          variant: "destructive"
        });
      }
      
      // Premier nettoyage complet
      clearAuthData();
      
      try {
        // D√©connexion explicite d'abord avec des options de s√©curit√© maximales
        await supabase.auth.signOut({ scope: 'global' });
      } catch (e) {
        console.log("Erreur de d√©connexion ignor√©e:", e);
      }
      
      // Petit d√©lai pour s'assurer que toutes les op√©rations asynchrones sont termin√©es
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Second nettoyage pour s'assurer que tout est propre
      clearAuthData();
      
      // Troisi√®me nettoyage apr√®s un d√©lai plus long pour les op√©rations diff√©r√©es
      setTimeout(() => {
        if (!cleanupDone.current) {
          clearAuthData();
          cleanupDone.current = true;
        }
      }, 2000);
      
      // Marquer comme termin√©
      cleanupDone.current = true;
      
      console.log("üßπ AuthCleanup: Nettoyage termin√©");
    };
    
    performCleanup();
    
    // Nettoyage au d√©montage pour √©viter les fuites m√©moire
    return () => {
      cleanupDone.current = true;
    };
  }, []);

  // Afficher une alerte si le r√©seau est inaccessible
  if (networkFailed) {
    return (
      <div className="hidden">
        {/* Composant invisible, l'alerte est g√©r√©e via toast */}
      </div>
    );
  }

  return null; // Composant sans rendu visuel
};

export default AuthCleanup;
