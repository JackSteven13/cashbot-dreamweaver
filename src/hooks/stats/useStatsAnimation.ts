
import { useCallback } from 'react';

interface UseStatsAnimationParams {
  adsCount: number;
  revenueCount: number;
  setDisplayedAdsCount: React.Dispatch<React.SetStateAction<number>>;
  setDisplayedRevenueCount: React.Dispatch<React.SetStateAction<number>>;
}

export const useStatsAnimation = ({
  adsCount,
  revenueCount,
  setDisplayedAdsCount,
  setDisplayedRevenueCount
}: UseStatsAnimationParams) => {
  // Animation dramatically improved for impressive numbers
  const animateCounters = useCallback(() => {
    // Update ad count with ultra-fast animation to show massive processing
    setDisplayedAdsCount((prevCount) => {
      if (prevCount >= adsCount) return adsCount;
      // Much larger increments for dramatic visual effect
      const increment = Math.max(Math.floor((adsCount - prevCount) * 0.8), 300);
      const newAdsCount = Math.min(prevCount + increment, adsCount);
      
      // Only update revenue display when ads are updated
      if (newAdsCount > prevCount) {
        setDisplayedRevenueCount((prevRevCount) => {
          if (prevRevCount >= revenueCount) return revenueCount;
          
          // Calculate how much revenue should be shown based on new ads processed
          const adsProcessed = newAdsCount - prevCount;
          
          // Create very visible jumps in revenue - each ad is worth between 1-25â‚¬
          let revenuePerAd;
          const randomFactor = Math.random();
          
          if (randomFactor > 0.95) {
            // Ultra-premium ads (20-25â‚¬ each)
            revenuePerAd = 20 + Math.random() * 5;
            console.log(`ðŸ’ŽðŸ’ŽðŸ’Ž ULTRA-PREMIUM AD: +${Math.round(revenuePerAd)}â‚¬ per ad!`);
          } else if (randomFactor > 0.85) {
            // Premium ads (15-20â‚¬ each)
            revenuePerAd = 15 + Math.random() * 5;
            console.log(`ðŸ’°ðŸ’° PREMIUM AD: +${Math.round(revenuePerAd)}â‚¬ per ad!`);
          } else if (randomFactor > 0.65) {
            // High-value ads (10-15â‚¬ each)
            revenuePerAd = 10 + Math.random() * 5;
            console.log(`ðŸ’° High-value ad: +${Math.round(revenuePerAd)}â‚¬ per ad`);
          } else if (randomFactor > 0.4) {
            // Medium-value ads (5-10â‚¬ each)
            revenuePerAd = 5 + Math.random() * 5;
          } else {
            // Standard ads (1-5â‚¬ each)
            revenuePerAd = 1 + Math.random() * 4;
          }
          
          // Calculate total revenue generated by these ads
          const revenueIncrement = adsProcessed * revenuePerAd;
          
          return Math.min(prevRevCount + revenueIncrement, revenueCount);
        });
      }
      
      return newAdsCount;
    });

    // Return true to indicate animation is still active if either counter hasn't reached its target
    return { 
      animationActive: adsCount > 0 || revenueCount > 0 
    };
  }, [adsCount, revenueCount, setDisplayedAdsCount, setDisplayedRevenueCount]);

  return { animateCounters };
};
