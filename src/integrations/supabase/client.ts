
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

export const SUPABASE_URL = "https://cfjibduhagxiwqkiyhqd.supabase.co";
export const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmamliZHVoYWd4aXdxa2l5aHFkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxMTY1NTMsImV4cCI6MjA1NzY5MjU1M30.QRjnxj3RAjU_-G0PINfmPoOWixu8LTIsZDHcdGIVEg4";

// Configuration optimis√©e pour la production
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false, // D√©sactiv√© pour √©viter les probl√®mes de redirection
    storage: localStorage,
    flowType: 'implicit',
    debug: true, // Activer le d√©bogage
  },
  global: {
    headers: {
      'X-Client-Info': 'streamgenius',
      'Content-Type': 'application/json',
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

/**
 * Fonction radicale de nettoyage de toutes les donn√©es d'authentification
 * Optimis√©e pour r√©soudre les probl√®mes de connexion persistants
 */
export const clearStoredAuthData = () => {
  try {
    console.log("üßπ Nettoyage radical des donn√©es d'authentification");
    
    // Liste des pr√©fixes de cl√©s li√©es √† l'authentification √† supprimer
    const authPrefixes = [
      'sb-', 
      'supabase', 
      'auth.',
      'auth_',
      'token',
      'access_token',
      'refresh_token'
    ];
    
    // Identifiant sp√©cifique du projet Supabase √† nettoyer
    const projectRef = 'cfjibduhagxiwqkiyhqd';
    
    // Nettoyer les cl√©s sp√©cifiques au projet
    const specificKeys = [
      `sb-${projectRef}-auth-token`,
      `sb-${projectRef}-auth-token-for-integration`,
      `supabase.auth.token`,
      `supabase.auth.refreshToken`,
      `auth.token`,
      `auth_session`,
      `sb-access-token`,
      `sb-refresh-token`,
      'auth_checking',
      'auth_refreshing',
      'auth_redirecting',
      'auth_redirect_timestamp',
      'auth_check_timestamp',
      'auth_retry_count',
      'auth_in_progress'
    ];
    
    // Supprimer les cl√©s sp√©cifiques
    specificKeys.forEach(key => {
      try {
        localStorage.removeItem(key);
        sessionStorage.removeItem(key);
      } catch (e) {
        console.warn(`Impossible de supprimer la cl√© ${key}`, e);
      }
    });
    
    // Recherche et suppression de toutes les cl√©s correspondant aux pr√©fixes
    let keysToRemove = [];
    
    // V√©rification dans localStorage
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && authPrefixes.some(prefix => key.includes(prefix))) {
        keysToRemove.push(key);
      }
    }
    
    // Suppression des cl√©s identifi√©es
    keysToRemove.forEach(key => {
      try {
        localStorage.removeItem(key);
      } catch (e) {
        console.warn(`√âchec de suppression de ${key} dans localStorage`, e);
      }
    });
    
    // M√™me op√©ration pour sessionStorage
    keysToRemove = [];
    for (let i = 0; i < sessionStorage.length; i++) {
      const key = sessionStorage.key(i);
      if (key && authPrefixes.some(prefix => key.includes(prefix))) {
        keysToRemove.push(key);
      }
    }
    
    keysToRemove.forEach(key => {
      try {
        sessionStorage.removeItem(key);
      } catch (e) {
        console.warn(`√âchec de suppression de ${key} dans sessionStorage`, e);
      }
    });
    
    // Suppression compl√®te des cookies li√©s √† l'authentification
    document.cookie.split(';').forEach(cookie => {
      const cookieName = cookie.split('=')[0].trim();
      if (authPrefixes.some(prefix => cookieName.includes(prefix))) {
        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/;`;
      }
    });
    
    console.log(`Nettoyage des donn√©es d'authentification termin√©: ${keysToRemove.length} √©l√©ments supprim√©s`);
    return true;
  } catch (err) {
    console.error("Erreur critique lors du nettoyage des donn√©es d'authentification:", err);
    return false;
  }
};

/**
 * Fonction de v√©rification pour s'assurer qu'aucun jeton d'authentification n'existe
 * @returns true si les donn√©es sont propres, false sinon
 */
export const verifyAuthDataIsClean = () => {
  try {
    const projectRef = 'cfjibduhagxiwqkiyhqd';
    const tokenKey = `sb-${projectRef}-auth-token`;
    
    return !localStorage.getItem(tokenKey) && !sessionStorage.getItem(tokenKey);
  } catch (e) {
    console.error("Erreur lors de la v√©rification des donn√©es d'authentification:", e);
    return false;
  }
};
