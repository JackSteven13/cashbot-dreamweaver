
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cfjibduhagxiwqkiyhqd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmamliZHVoYWd4aXdxa2l5aHFkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxMTY1NTMsImV4cCI6MjA1NzY5MjU1M30.QRjnxj3RAjU_-G0PINfmPoOWixu8LTIsZDHcdGIVEg4";

// Configuration simplifiée et robuste pour éviter les problèmes d'authentification
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true, 
    persistSession: true,
    detectSessionInUrl: true, // Activer pour détecter les sessions dans l'URL
    storage: localStorage,
    flowType: 'implicit', // Forcer le flow implicite pour plus de compatibilité
  },
  global: {
    headers: {
      'X-Client-Info': 'streamgenius',
    },
  },
});

/**
 * Function to clean up all authentication data in local storage
 * This is useful for ensuring a clean state before login attempts
 */
export const clearStoredAuthData = () => {
  try {
    // Clear all Supabase related items from localStorage
    const keysToRemove = [];

    // First identify all keys to remove
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && (
          key.includes('supabase') || 
          key.includes('sb-') || 
          key.includes('auth') || 
          key.includes('token')
        )) {
        keysToRemove.push(key);
      }
    }
    
    // Then remove them (can't remove while iterating)
    keysToRemove.forEach(key => localStorage.removeItem(key));
    
    console.log(`Auth data cleared: removed ${keysToRemove.length} items`);
    return true;
  } catch (err) {
    console.error("Error clearing authentication data:", err);
    return false;
  }
};
